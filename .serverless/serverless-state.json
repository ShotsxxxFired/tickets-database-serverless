{
  "service": {
    "service": "dynamodb-tickets",
    "serviceObject": {
      "name": "dynamodb-tickets"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:BatchGetItem",
            "dynamodb:ConditionCheckItem",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:UpdateItem",
            "dynamodb:Scan",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "TicketsTable",
                "Arn"
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "TicketsTable",
                      "Arn"
                    ]
                  },
                  "index/GSI1"
                ]
              ]
            }
          ]
        }
      ],
      "environment": {
        "TABLE_NAME": {
          "Ref": "TicketsTable"
        }
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateCollectionCongfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-createCollectionCongfig"
            }
          },
          "GetCollectionConfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-getCollectionConfig"
            }
          },
          "CreateContractConfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-createContractConfig"
            }
          },
          "GetContractConfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-getContractConfig"
            }
          },
          "CreateEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-createEntry"
            }
          },
          "GetEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-getEntry"
            }
          },
          "CreateEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-createEvent"
            }
          },
          "GetEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-getEvent"
            }
          },
          "CreatePromoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-createPromo"
            }
          },
          "GetPromoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-getPromo"
            }
          },
          "CreatePromoEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-createPromoEntry"
            }
          },
          "GetPromoEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-getPromoEntry"
            }
          },
          "CreateSocialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-createSocial"
            }
          },
          "GetSocialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-getSocial"
            }
          },
          "CreateSocialEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-createSocialEntry"
            }
          },
          "GetSocialEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-getSocialEntry"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-createUser"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-getUser"
            }
          },
          "QueryActiveSocialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-queryActiveSocial"
            }
          },
          "QueryCollectionConfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-queryCollectionConfig"
            }
          },
          "QueryContractConfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-queryContractConfig"
            }
          },
          "QueryLeaderboardByEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-queryLeaderboardByEvent"
            }
          },
          "QueryPromoEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-queryPromoEvents"
            }
          },
          "QueryRecentEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-queryRecentEvents"
            }
          },
          "UpdateAnyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-updateAny"
            }
          },
          "SubmitEntryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-submitEntry"
            }
          },
          "SubmitPromoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-submitPromo"
            }
          },
          "SubmitSocialLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-submitSocial"
            }
          },
          "SetUserNicknameLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-setUserNickname"
            }
          },
          "SetUserTwitterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-setUserTwitter"
            }
          },
          "ScanUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-scanUsers"
            }
          },
          "DeleteItemLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dynamodb-tickets-prod-deleteItem"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dynamodb-tickets",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dynamodb-tickets-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dynamodb-tickets-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "dynamodb-tickets",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateCollectionCongfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/createCollectionConfig.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-createCollectionCongfig",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCollectionCongfigLogGroup"
            ]
          },
          "GetCollectionConfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/getCollectionConfig.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-getCollectionConfig",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCollectionConfigLogGroup"
            ]
          },
          "CreateContractConfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/createContractConfig.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-createContractConfig",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateContractConfigLogGroup"
            ]
          },
          "GetContractConfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/getContractConfig.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-getContractConfig",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetContractConfigLogGroup"
            ]
          },
          "CreateEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/createEntry.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-createEntry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEntryLogGroup"
            ]
          },
          "GetEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/getEntry.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-getEntry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEntryLogGroup"
            ]
          },
          "CreateEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/createEvent.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-createEvent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEventLogGroup"
            ]
          },
          "GetEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/getEvent.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-getEvent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEventLogGroup"
            ]
          },
          "CreatePromoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/createPromo.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-createPromo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePromoLogGroup"
            ]
          },
          "GetPromoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/getPromo.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-getPromo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPromoLogGroup"
            ]
          },
          "CreatePromoEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/createPromoEntry.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-createPromoEntry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePromoEntryLogGroup"
            ]
          },
          "GetPromoEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/getPromoEntry.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-getPromoEntry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPromoEntryLogGroup"
            ]
          },
          "CreateSocialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/createSocial.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-createSocial",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateSocialLogGroup"
            ]
          },
          "GetSocialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/getSocial.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-getSocial",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSocialLogGroup"
            ]
          },
          "CreateSocialEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/createSocialEntry.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-createSocialEntry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateSocialEntryLogGroup"
            ]
          },
          "GetSocialEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/getSocialEntry.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-getSocialEntry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSocialEntryLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/createUser.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-createUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/getUser.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "QueryActiveSocialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/queryActiveSocial.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-queryActiveSocial",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "QueryActiveSocialLogGroup"
            ]
          },
          "QueryCollectionConfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/queryCollectionConfig.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-queryCollectionConfig",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "QueryCollectionConfigLogGroup"
            ]
          },
          "QueryContractConfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/queryContractConfig.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-queryContractConfig",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "QueryContractConfigLogGroup"
            ]
          },
          "QueryLeaderboardByEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/queryLeaderboardByEvent.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-queryLeaderboardByEvent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "QueryLeaderboardByEventLogGroup"
            ]
          },
          "QueryPromoEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/queryPromoEvents.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-queryPromoEvents",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "QueryPromoEventsLogGroup"
            ]
          },
          "QueryRecentEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/queryRecentEvents.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-queryRecentEvents",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "QueryRecentEventsLogGroup"
            ]
          },
          "UpdateAnyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/updateAny.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-updateAny",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateAnyLogGroup"
            ]
          },
          "SubmitEntryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/submitEntry.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-submitEntry",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitEntryLogGroup"
            ]
          },
          "SubmitPromoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/submitPromo.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-submitPromo",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitPromoLogGroup"
            ]
          },
          "SubmitSocialLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/submitSocial.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-submitSocial",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubmitSocialLogGroup"
            ]
          },
          "SetUserNicknameLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/setUserNickname.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-setUserNickname",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SetUserNicknameLogGroup"
            ]
          },
          "SetUserTwitterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/setUserTwitter.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-setUserTwitter",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SetUserTwitterLogGroup"
            ]
          },
          "ScanUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/scanUsers.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-scanUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ScanUsersLogGroup"
            ]
          },
          "DeleteItemLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z/dynamodb-tickets.zip"
              },
              "Handler": "src/handlers/deleteItem.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "dynamodb-tickets-prod-deleteItem",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "TABLE_NAME": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"TABLE_NAME\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteItemLogGroup"
            ]
          },
          "CreateCollectionCongfigLambdaVersionh2xhm0YAiv2MkvJg86pxDzpab79Cr4pyNN5zrw8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCollectionCongfigLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "GetCollectionConfigLambdaVersionf5uz7otYJKBVJQOPNFXjiLHvuwLzftnSmww1NXpU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCollectionConfigLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "CreateContractConfigLambdaVersion8P5K2d8HF9XSp89bwLBIQ5j9VLZdfzASVyn90uSc86s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateContractConfigLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "GetContractConfigLambdaVersionXAjZyHjdOnLRt9a3tnXTTQVQk009zCFYDtHB7k7ss8M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetContractConfigLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "CreateEntryLambdaVersionCQxse83LqchKTOUHLCBWTwqkxhL5XRmTzACl0DIOK6M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEntryLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "GetEntryLambdaVersiongi6ZJqVX4NGvl7tSpA5jHe8BOdoCwf3rvkfmZXFK2o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEntryLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "CreateEventLambdaVersionQVd3VtAwjMs5WYA8EBLclDBtJsBqiEZBr3hMO6SJI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEventLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "GetEventLambdaVersionmZ7VFmhBIv8IZXxQysVeq8iX8z2ezhL27Uomj3QI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEventLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "CreatePromoLambdaVersionwemfle1AKwjIgoISXQIOmnd5jbY9WglH5O9XqGtQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePromoLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "GetPromoLambdaVersionNW4RQ3EBZW61mBfN4uvrsXPsdaRs7T8S4R0lA5j1sj0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPromoLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "CreatePromoEntryLambdaVersionV6bxGR0h9UDHa3kczZMV6gITHAv8iXf1VOtgOZaHS0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePromoEntryLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "GetPromoEntryLambdaVersionsT0GMKlOT2Or9FAhJKKpQi348U7I9VNAPhBLIW1nE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPromoEntryLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "CreateSocialLambdaVersionCPayB5Uij8DdcTNKBJLMuOVPI6DdEYK2sh1jf9Xbv8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateSocialLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "GetSocialLambdaVersionXfXLkoJcBrGXyQtSakxX2J7sf6ZCQfathXk0XLULE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSocialLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "CreateSocialEntryLambdaVersionWZHE6ovCBmgY4T3wRxg9jhIbkeS5DXJkBuI1Nj0yvw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateSocialEntryLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "GetSocialEntryLambdaVersion8NGyRrSFFiMysM6YG56xfQUQf9sJN1X9tYgLN3fwuiw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSocialEntryLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "CreateUserLambdaVersionLwXsL9hmvrzqa2qhrTBG8hoHsrXT9gFKpv4oIiFtNwE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "GetUserLambdaVersionbWeGxzf8MPve1ajTIhCAvyibWYeh0JqvI6N4fZFtLA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "QueryActiveSocialLambdaVersion8BjQBs8QdIPN9HLDgENy6aVFjuonqjmGw9ORFAej4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "QueryActiveSocialLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "QueryCollectionConfigLambdaVersionMvUq8O4TvwNbRasn7wVOMkhDSw6RFpb2Qf7GdcbzuQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "QueryCollectionConfigLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "QueryContractConfigLambdaVersionxDi4dBolDhgxxxTEwk9zaCPpriCvSXDSfo5YUcIKU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "QueryContractConfigLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "QueryLeaderboardByEventLambdaVersion2RYSJj5u354JWP0htyx7GW1BrAghIFFbIKdcnPwg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "QueryLeaderboardByEventLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "QueryPromoEventsLambdaVersionQay5LkidccyOnvm5MOx4g42KGgJ2tc4RuEtSkByvNg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "QueryPromoEventsLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "QueryRecentEventsLambdaVersionYXjgfs0aS2DKMFA9rDVP3tYMIzCq93Oodkd17ezLG4U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "QueryRecentEventsLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "UpdateAnyLambdaVersionJh57jfndC7x3klrKOJrAx8qVl55Ql2arDiPZHLfCIg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateAnyLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "SubmitEntryLambdaVersiono5McI1qyvkQYftqGyWq7hRm0kr6ulENkjqe3jgvJQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitEntryLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "SubmitPromoLambdaVersionFaJBiOBM10eIe9F5pZAXfYh7WbYpL4uG8osQMBc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitPromoLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "SubmitSocialLambdaVersionqJco75yf3q0tgKvK1kXxTbLqe5rDIyabMHdECzC73A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubmitSocialLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "SetUserNicknameLambdaVersion79VaGkudiawPgieZMSFNB9HgWQqTLGRtf770QRdhRTg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SetUserNicknameLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "SetUserTwitterLambdaVersionu1SHbRrQvdv0PFhGSHaq5Ae5762urJ7XttDVdzjdOs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SetUserTwitterLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "ScanUsersLambdaVersionL5Ehn1Irx6Da2XZ26CaYJmvCTGOwkhyNvIcM77I5cg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ScanUsersLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "DeleteItemLambdaVersionpJzu50JYscw20IbUcvD2cxgsVFc3Cum0oNokA4Cbyc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteItemLambdaFunction"
              },
              "CodeSha256": "9u7bzSmhFFQdjNoe+GvBAsF2VedduPfJRP5cg283isc="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-dynamodb-tickets",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceCollectionconfig": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "collectionconfig",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractaddress": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "contractaddress",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractaddressContractaddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContractaddress"
              },
              "PathPart": "{contractAddress}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractaddressContractaddressVarId": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContractaddressContractaddressVar"
              },
              "PathPart": "ID",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractaddressContractaddressVarIdCollectionidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContractaddressContractaddressVarId"
              },
              "PathPart": "{collectionID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractconfig": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "contractconfig",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEntry": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "entry",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEvent": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "event",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventEventidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEvent"
              },
              "PathPart": "{eventID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventEventidVarWallet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEventEventidVar"
              },
              "PathPart": "wallet",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventEventidVarWalletWalletidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEventEventidVarWallet"
              },
              "PathPart": "{walletID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventEventidVarWalletWalletidVarPromo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEventEventidVarWalletWalletidVar"
              },
              "PathPart": "promo",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventEventidVarWalletWalletidVarSocial": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEventEventidVarWalletWalletidVar"
              },
              "PathPart": "social",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventEventidVarPromo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEventEventidVar"
              },
              "PathPart": "promo",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventEventidVarPromoCodeVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEventEventidVarPromo"
              },
              "PathPart": "{code}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventEventidVarEntries": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEventEventidVar"
              },
              "PathPart": "entries",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePromo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "promo",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePromoentry": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "promoentry",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSocial": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "social",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSocialSocialidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSocial"
              },
              "PathPart": "{socialID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSocialentry": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "socialentry",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWallet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "wallet",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletWalletidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "{walletID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceYear": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "year",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceYearYearVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceYear"
              },
              "PathPart": "{year}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceYearYearVarSocial": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceYearYearVar"
              },
              "PathPart": "social",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContract": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "contract",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractContractaddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContract"
              },
              "PathPart": "{contractAddress}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractContractaddressVarCollection": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContractContractaddressVar"
              },
              "PathPart": "collection",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractAll": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContract"
              },
              "PathPart": "all",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTime": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "time",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTimeYearmonthVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTime"
              },
              "PathPart": "{yearMonth}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTimeYearmonthVarEvents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTimeYearmonthVar"
              },
              "PathPart": "events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "update",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSubmit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "submit",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSubmitEntry": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSubmit"
              },
              "PathPart": "entry",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSubmitPromo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSubmit"
              },
              "PathPart": "promo",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSubmitSocial": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSubmit"
              },
              "PathPart": "social",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "set",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSetUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSet"
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSetUserNickname": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSetUser"
              },
              "PathPart": "nickname",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSetUserTwitter": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSetUser"
              },
              "PathPart": "twitter",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScan": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "scan",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceScanUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceScan"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDelete": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "delete",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCollectionconfigPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionconfig"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateCollectionCongfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateCollectionCongfigLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContractaddressContractaddressVarIdCollectionidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractaddressContractaddressVarIdCollectionidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCollectionConfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetCollectionConfigLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContractconfigPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractconfig"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateContractConfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateContractConfigLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContractaddressContractaddressVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractaddressContractaddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetContractConfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetContractConfigLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEntryPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEntry"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateEntryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventEventidVarWalletWalletidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventEventidVarWalletWalletidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetEntryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEvent"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateEventLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventEventidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventEventidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetEventLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPromoPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePromo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePromoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreatePromoLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventEventidVarPromoCodeVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventEventidVarPromoCodeVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPromoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetPromoLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPromoentryPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePromoentry"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePromoEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreatePromoEntryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventEventidVarWalletWalletidVarPromoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventEventidVarWalletWalletidVarPromo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPromoEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetPromoEntryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSocialPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSocial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateSocialLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateSocialLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSocialSocialidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSocialSocialidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSocialLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSocialLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSocialentryPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSocialentry"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateSocialEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateSocialEntryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventEventidVarWalletWalletidVarSocialGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventEventidVarWalletWalletidVarSocial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSocialEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSocialEntryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletWalletidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletWalletidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodYearYearVarSocialGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceYearYearVarSocial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "QueryActiveSocialLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "QueryActiveSocialLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContractContractaddressVarCollectionGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractContractaddressVarCollection"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "QueryCollectionConfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "QueryCollectionConfigLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContractAllGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractAll"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "QueryContractConfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "QueryContractConfigLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventEventidVarEntriesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventEventidVarEntries"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "QueryLeaderboardByEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "QueryLeaderboardByEventLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventEventidVarPromoGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventEventidVarPromo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "QueryPromoEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "QueryPromoEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTimeYearmonthVarEventsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTimeYearmonthVarEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "QueryRecentEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "QueryRecentEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateAnyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateAnyLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSubmitEntryPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSubmitEntry"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SubmitEntryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SubmitEntryLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSubmitPromoPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSubmitPromo"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SubmitPromoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SubmitPromoLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSubmitSocialPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSubmitSocial"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SubmitSocialLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SubmitSocialLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSetUserNicknamePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSetUserNickname"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SetUserNicknameLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SetUserNicknameLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSetUserTwitterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSetUserTwitter"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SetUserTwitterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SetUserTwitterLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodScanUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceScanUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ScanUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ScanUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDeletePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDelete"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteItemLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteItemLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1715892414478": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodCollectionconfigPost",
              "ApiGatewayMethodContractaddressContractaddressVarIdCollectionidVarGet",
              "ApiGatewayMethodContractconfigPost",
              "ApiGatewayMethodContractaddressContractaddressVarGet",
              "ApiGatewayMethodEntryPost",
              "ApiGatewayMethodEventEventidVarWalletWalletidVarGet",
              "ApiGatewayMethodEventPost",
              "ApiGatewayMethodEventEventidVarGet",
              "ApiGatewayMethodPromoPost",
              "ApiGatewayMethodEventEventidVarPromoCodeVarGet",
              "ApiGatewayMethodPromoentryPost",
              "ApiGatewayMethodEventEventidVarWalletWalletidVarPromoGet",
              "ApiGatewayMethodSocialPost",
              "ApiGatewayMethodSocialSocialidVarGet",
              "ApiGatewayMethodSocialentryPost",
              "ApiGatewayMethodEventEventidVarWalletWalletidVarSocialGet",
              "ApiGatewayMethodUserPost",
              "ApiGatewayMethodWalletWalletidVarGet",
              "ApiGatewayMethodYearYearVarSocialGet",
              "ApiGatewayMethodContractContractaddressVarCollectionGet",
              "ApiGatewayMethodContractAllGet",
              "ApiGatewayMethodEventEventidVarEntriesGet",
              "ApiGatewayMethodEventEventidVarPromoGet",
              "ApiGatewayMethodTimeYearmonthVarEventsGet",
              "ApiGatewayMethodUpdatePost",
              "ApiGatewayMethodSubmitEntryPost",
              "ApiGatewayMethodSubmitPromoPost",
              "ApiGatewayMethodSubmitSocialPost",
              "ApiGatewayMethodSetUserNicknamePost",
              "ApiGatewayMethodSetUserTwitterPost",
              "ApiGatewayMethodScanUsersGet",
              "ApiGatewayMethodDeletePost"
            ]
          },
          "CreateCollectionCongfigLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCollectionCongfigLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetCollectionConfigLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCollectionConfigLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateContractConfigLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateContractConfigLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetContractConfigLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetContractConfigLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreatePromoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePromoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPromoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPromoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreatePromoEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePromoEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPromoEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPromoEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateSocialLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateSocialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSocialLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSocialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateSocialEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateSocialEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSocialEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSocialEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "QueryActiveSocialLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "QueryActiveSocialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "QueryCollectionConfigLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "QueryCollectionConfigLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "QueryContractConfigLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "QueryContractConfigLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "QueryLeaderboardByEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "QueryLeaderboardByEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "QueryPromoEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "QueryPromoEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "QueryRecentEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "QueryRecentEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateAnyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateAnyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SubmitEntryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitEntryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SubmitPromoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitPromoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SubmitSocialLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubmitSocialLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SetUserNicknameLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SetUserNicknameLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SetUserTwitterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SetUserTwitterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ScanUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ScanUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteItemLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteItemLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "TicketsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "SK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "GSI1PK",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "GSI1SK",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "PK",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "SK",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "GSI1",
                  "KeySchema": [
                    {
                      "AttributeName": "GSI1PK",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "GSI1SK",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-ServerlessDeploymentBucketName"
            }
          },
          "CreateCollectionCongfigLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCollectionCongfigLambdaVersionh2xhm0YAiv2MkvJg86pxDzpab79Cr4pyNN5zrw8"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-CreateCollectionCongfigLambdaFunctionQualifiedArn"
            }
          },
          "GetCollectionConfigLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCollectionConfigLambdaVersionf5uz7otYJKBVJQOPNFXjiLHvuwLzftnSmww1NXpU"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-GetCollectionConfigLambdaFunctionQualifiedArn"
            }
          },
          "CreateContractConfigLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateContractConfigLambdaVersion8P5K2d8HF9XSp89bwLBIQ5j9VLZdfzASVyn90uSc86s"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-CreateContractConfigLambdaFunctionQualifiedArn"
            }
          },
          "GetContractConfigLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetContractConfigLambdaVersionXAjZyHjdOnLRt9a3tnXTTQVQk009zCFYDtHB7k7ss8M"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-GetContractConfigLambdaFunctionQualifiedArn"
            }
          },
          "CreateEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEntryLambdaVersionCQxse83LqchKTOUHLCBWTwqkxhL5XRmTzACl0DIOK6M"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-CreateEntryLambdaFunctionQualifiedArn"
            }
          },
          "GetEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEntryLambdaVersiongi6ZJqVX4NGvl7tSpA5jHe8BOdoCwf3rvkfmZXFK2o"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-GetEntryLambdaFunctionQualifiedArn"
            }
          },
          "CreateEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEventLambdaVersionQVd3VtAwjMs5WYA8EBLclDBtJsBqiEZBr3hMO6SJI"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-CreateEventLambdaFunctionQualifiedArn"
            }
          },
          "GetEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEventLambdaVersionmZ7VFmhBIv8IZXxQysVeq8iX8z2ezhL27Uomj3QI"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-GetEventLambdaFunctionQualifiedArn"
            }
          },
          "CreatePromoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePromoLambdaVersionwemfle1AKwjIgoISXQIOmnd5jbY9WglH5O9XqGtQ"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-CreatePromoLambdaFunctionQualifiedArn"
            }
          },
          "GetPromoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPromoLambdaVersionNW4RQ3EBZW61mBfN4uvrsXPsdaRs7T8S4R0lA5j1sj0"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-GetPromoLambdaFunctionQualifiedArn"
            }
          },
          "CreatePromoEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePromoEntryLambdaVersionV6bxGR0h9UDHa3kczZMV6gITHAv8iXf1VOtgOZaHS0"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-CreatePromoEntryLambdaFunctionQualifiedArn"
            }
          },
          "GetPromoEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPromoEntryLambdaVersionsT0GMKlOT2Or9FAhJKKpQi348U7I9VNAPhBLIW1nE"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-GetPromoEntryLambdaFunctionQualifiedArn"
            }
          },
          "CreateSocialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateSocialLambdaVersionCPayB5Uij8DdcTNKBJLMuOVPI6DdEYK2sh1jf9Xbv8"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-CreateSocialLambdaFunctionQualifiedArn"
            }
          },
          "GetSocialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSocialLambdaVersionXfXLkoJcBrGXyQtSakxX2J7sf6ZCQfathXk0XLULE"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-GetSocialLambdaFunctionQualifiedArn"
            }
          },
          "CreateSocialEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateSocialEntryLambdaVersionWZHE6ovCBmgY4T3wRxg9jhIbkeS5DXJkBuI1Nj0yvw"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-CreateSocialEntryLambdaFunctionQualifiedArn"
            }
          },
          "GetSocialEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSocialEntryLambdaVersion8NGyRrSFFiMysM6YG56xfQUQf9sJN1X9tYgLN3fwuiw"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-GetSocialEntryLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionLwXsL9hmvrzqa2qhrTBG8hoHsrXT9gFKpv4oIiFtNwE"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionbWeGxzf8MPve1ajTIhCAvyibWYeh0JqvI6N4fZFtLA"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "QueryActiveSocialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "QueryActiveSocialLambdaVersion8BjQBs8QdIPN9HLDgENy6aVFjuonqjmGw9ORFAej4"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-QueryActiveSocialLambdaFunctionQualifiedArn"
            }
          },
          "QueryCollectionConfigLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "QueryCollectionConfigLambdaVersionMvUq8O4TvwNbRasn7wVOMkhDSw6RFpb2Qf7GdcbzuQ"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-QueryCollectionConfigLambdaFunctionQualifiedArn"
            }
          },
          "QueryContractConfigLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "QueryContractConfigLambdaVersionxDi4dBolDhgxxxTEwk9zaCPpriCvSXDSfo5YUcIKU"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-QueryContractConfigLambdaFunctionQualifiedArn"
            }
          },
          "QueryLeaderboardByEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "QueryLeaderboardByEventLambdaVersion2RYSJj5u354JWP0htyx7GW1BrAghIFFbIKdcnPwg"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-QueryLeaderboardByEventLambdaFunctionQualifiedArn"
            }
          },
          "QueryPromoEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "QueryPromoEventsLambdaVersionQay5LkidccyOnvm5MOx4g42KGgJ2tc4RuEtSkByvNg"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-QueryPromoEventsLambdaFunctionQualifiedArn"
            }
          },
          "QueryRecentEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "QueryRecentEventsLambdaVersionYXjgfs0aS2DKMFA9rDVP3tYMIzCq93Oodkd17ezLG4U"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-QueryRecentEventsLambdaFunctionQualifiedArn"
            }
          },
          "UpdateAnyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateAnyLambdaVersionJh57jfndC7x3klrKOJrAx8qVl55Ql2arDiPZHLfCIg"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-UpdateAnyLambdaFunctionQualifiedArn"
            }
          },
          "SubmitEntryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitEntryLambdaVersiono5McI1qyvkQYftqGyWq7hRm0kr6ulENkjqe3jgvJQ"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-SubmitEntryLambdaFunctionQualifiedArn"
            }
          },
          "SubmitPromoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitPromoLambdaVersionFaJBiOBM10eIe9F5pZAXfYh7WbYpL4uG8osQMBc"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-SubmitPromoLambdaFunctionQualifiedArn"
            }
          },
          "SubmitSocialLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubmitSocialLambdaVersionqJco75yf3q0tgKvK1kXxTbLqe5rDIyabMHdECzC73A"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-SubmitSocialLambdaFunctionQualifiedArn"
            }
          },
          "SetUserNicknameLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SetUserNicknameLambdaVersion79VaGkudiawPgieZMSFNB9HgWQqTLGRtf770QRdhRTg"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-SetUserNicknameLambdaFunctionQualifiedArn"
            }
          },
          "SetUserTwitterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SetUserTwitterLambdaVersionu1SHbRrQvdv0PFhGSHaq5Ae5762urJ7XttDVdzjdOs"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-SetUserTwitterLambdaFunctionQualifiedArn"
            }
          },
          "ScanUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ScanUsersLambdaVersionL5Ehn1Irx6Da2XZ26CaYJmvCTGOwkhyNvIcM77I5cg"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-ScanUsersLambdaFunctionQualifiedArn"
            }
          },
          "DeleteItemLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteItemLambdaVersionpJzu50JYscw20IbUcvD2cxgsVFc3Cum0oNokA4Cbyc"
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-DeleteItemLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "Export": {
              "Name": "sls-dynamodb-tickets-prod-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-esbuild",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "createCollectionCongfig": {
        "handler": "src/handlers/createCollectionConfig.handler",
        "events": [
          {
            "http": {
              "path": "collectionconfig",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-createCollectionCongfig",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateCollectionCongfigLambdaVersionh2xhm0YAiv2MkvJg86pxDzpab79Cr4pyNN5zrw8"
      },
      "getCollectionConfig": {
        "handler": "src/handlers/getCollectionConfig.handler",
        "events": [
          {
            "http": {
              "path": "contractaddress/{contractAddress}/ID/{collectionID}",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-getCollectionConfig",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetCollectionConfigLambdaVersionf5uz7otYJKBVJQOPNFXjiLHvuwLzftnSmww1NXpU"
      },
      "createContractConfig": {
        "handler": "src/handlers/createContractConfig.handler",
        "events": [
          {
            "http": {
              "path": "contractconfig",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-createContractConfig",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateContractConfigLambdaVersion8P5K2d8HF9XSp89bwLBIQ5j9VLZdfzASVyn90uSc86s"
      },
      "getContractConfig": {
        "handler": "src/handlers/getContractConfig.handler",
        "events": [
          {
            "http": {
              "path": "contractaddress/{contractAddress}",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-getContractConfig",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetContractConfigLambdaVersionXAjZyHjdOnLRt9a3tnXTTQVQk009zCFYDtHB7k7ss8M"
      },
      "createEntry": {
        "handler": "src/handlers/createEntry.handler",
        "events": [
          {
            "http": {
              "path": "entry",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-createEntry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateEntryLambdaVersionCQxse83LqchKTOUHLCBWTwqkxhL5XRmTzACl0DIOK6M"
      },
      "getEntry": {
        "handler": "src/handlers/getEntry.handler",
        "events": [
          {
            "http": {
              "path": "event/{eventID}/wallet/{walletID}",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-getEntry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetEntryLambdaVersiongi6ZJqVX4NGvl7tSpA5jHe8BOdoCwf3rvkfmZXFK2o"
      },
      "createEvent": {
        "handler": "src/handlers/createEvent.handler",
        "events": [
          {
            "http": {
              "path": "event",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-createEvent",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateEventLambdaVersionQVd3VtAwjMs5WYA8EBLclDBtJsBqiEZBr3hMO6SJI"
      },
      "getEvent": {
        "handler": "src/handlers/getEvent.handler",
        "events": [
          {
            "http": {
              "path": "event/{eventID}",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-getEvent",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetEventLambdaVersionmZ7VFmhBIv8IZXxQysVeq8iX8z2ezhL27Uomj3QI"
      },
      "createPromo": {
        "handler": "src/handlers/createPromo.handler",
        "events": [
          {
            "http": {
              "path": "promo",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-createPromo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreatePromoLambdaVersionwemfle1AKwjIgoISXQIOmnd5jbY9WglH5O9XqGtQ"
      },
      "getPromo": {
        "handler": "src/handlers/getPromo.handler",
        "events": [
          {
            "http": {
              "path": "event/{eventID}/promo/{code}",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-getPromo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetPromoLambdaVersionNW4RQ3EBZW61mBfN4uvrsXPsdaRs7T8S4R0lA5j1sj0"
      },
      "createPromoEntry": {
        "handler": "src/handlers/createPromoEntry.handler",
        "events": [
          {
            "http": {
              "path": "promoentry",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-createPromoEntry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreatePromoEntryLambdaVersionV6bxGR0h9UDHa3kczZMV6gITHAv8iXf1VOtgOZaHS0"
      },
      "getPromoEntry": {
        "handler": "src/handlers/getPromoEntry.handler",
        "events": [
          {
            "http": {
              "path": "event/{eventID}/wallet/{walletID}/promo",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-getPromoEntry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetPromoEntryLambdaVersionsT0GMKlOT2Or9FAhJKKpQi348U7I9VNAPhBLIW1nE"
      },
      "createSocial": {
        "handler": "src/handlers/createSocial.handler",
        "events": [
          {
            "http": {
              "path": "social",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-createSocial",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateSocialLambdaVersionCPayB5Uij8DdcTNKBJLMuOVPI6DdEYK2sh1jf9Xbv8"
      },
      "getSocial": {
        "handler": "src/handlers/getSocial.handler",
        "events": [
          {
            "http": {
              "path": "social/{socialID}",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-getSocial",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetSocialLambdaVersionXfXLkoJcBrGXyQtSakxX2J7sf6ZCQfathXk0XLULE"
      },
      "createSocialEntry": {
        "handler": "src/handlers/createSocialEntry.handler",
        "events": [
          {
            "http": {
              "path": "socialentry",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-createSocialEntry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateSocialEntryLambdaVersionWZHE6ovCBmgY4T3wRxg9jhIbkeS5DXJkBuI1Nj0yvw"
      },
      "getSocialEntry": {
        "handler": "src/handlers/getSocialEntry.handler",
        "events": [
          {
            "http": {
              "path": "event/{eventID}/wallet/{walletID}/social",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-getSocialEntry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetSocialEntryLambdaVersion8NGyRrSFFiMysM6YG56xfQUQf9sJN1X9tYgLN3fwuiw"
      },
      "createUser": {
        "handler": "src/handlers/createUser.handler",
        "events": [
          {
            "http": {
              "path": "user",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-createUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersionLwXsL9hmvrzqa2qhrTBG8hoHsrXT9gFKpv4oIiFtNwE"
      },
      "getUser": {
        "handler": "src/handlers/getUser.handler",
        "events": [
          {
            "http": {
              "path": "wallet/{walletID}",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionbWeGxzf8MPve1ajTIhCAvyibWYeh0JqvI6N4fZFtLA"
      },
      "queryActiveSocial": {
        "handler": "src/handlers/queryActiveSocial.handler",
        "events": [
          {
            "http": {
              "path": "year/{year}/social",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-queryActiveSocial",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "QueryActiveSocialLambdaVersion8BjQBs8QdIPN9HLDgENy6aVFjuonqjmGw9ORFAej4"
      },
      "queryCollectionConfig": {
        "handler": "src/handlers/queryCollectionConfig.handler",
        "events": [
          {
            "http": {
              "path": "contract/{contractAddress}/collection",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-queryCollectionConfig",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "QueryCollectionConfigLambdaVersionMvUq8O4TvwNbRasn7wVOMkhDSw6RFpb2Qf7GdcbzuQ"
      },
      "queryContractConfig": {
        "handler": "src/handlers/queryContractConfig.handler",
        "events": [
          {
            "http": {
              "path": "contract/all",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-queryContractConfig",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "QueryContractConfigLambdaVersionxDi4dBolDhgxxxTEwk9zaCPpriCvSXDSfo5YUcIKU"
      },
      "queryLeaderboardByEvent": {
        "handler": "src/handlers/queryLeaderboardByEvent.handler",
        "events": [
          {
            "http": {
              "path": "event/{eventID}/entries",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-queryLeaderboardByEvent",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "QueryLeaderboardByEventLambdaVersion2RYSJj5u354JWP0htyx7GW1BrAghIFFbIKdcnPwg"
      },
      "queryPromoEvents": {
        "handler": "src/handlers/queryPromoEvents.handler",
        "events": [
          {
            "http": {
              "path": "event/{eventID}/promo",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-queryPromoEvents",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "QueryPromoEventsLambdaVersionQay5LkidccyOnvm5MOx4g42KGgJ2tc4RuEtSkByvNg"
      },
      "queryRecentEvents": {
        "handler": "src/handlers/queryRecentEvents.handler",
        "events": [
          {
            "http": {
              "path": "time/{yearMonth}/events",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-queryRecentEvents",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "QueryRecentEventsLambdaVersionYXjgfs0aS2DKMFA9rDVP3tYMIzCq93Oodkd17ezLG4U"
      },
      "updateAny": {
        "handler": "src/handlers/updateAny.handler",
        "events": [
          {
            "http": {
              "path": "update",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-updateAny",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateAnyLambdaVersionJh57jfndC7x3klrKOJrAx8qVl55Ql2arDiPZHLfCIg"
      },
      "submitEntry": {
        "handler": "src/handlers/submitEntry.handler",
        "events": [
          {
            "http": {
              "path": "submit/entry",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-submitEntry",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SubmitEntryLambdaVersiono5McI1qyvkQYftqGyWq7hRm0kr6ulENkjqe3jgvJQ"
      },
      "submitPromo": {
        "handler": "src/handlers/submitPromo.handler",
        "events": [
          {
            "http": {
              "path": "submit/promo",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-submitPromo",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SubmitPromoLambdaVersionFaJBiOBM10eIe9F5pZAXfYh7WbYpL4uG8osQMBc"
      },
      "submitSocial": {
        "handler": "src/handlers/submitSocial.handler",
        "events": [
          {
            "http": {
              "path": "submit/social",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-submitSocial",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SubmitSocialLambdaVersionqJco75yf3q0tgKvK1kXxTbLqe5rDIyabMHdECzC73A"
      },
      "setUserNickname": {
        "handler": "src/handlers/setUserNickname.handler",
        "events": [
          {
            "http": {
              "path": "set/user/nickname",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-setUserNickname",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SetUserNicknameLambdaVersion79VaGkudiawPgieZMSFNB9HgWQqTLGRtf770QRdhRTg"
      },
      "setUserTwitter": {
        "handler": "src/handlers/setUserTwitter.handler",
        "events": [
          {
            "http": {
              "path": "set/user/twitter",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-setUserTwitter",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SetUserTwitterLambdaVersionu1SHbRrQvdv0PFhGSHaq5Ae5762urJ7XttDVdzjdOs"
      },
      "scanUsers": {
        "handler": "src/handlers/scanUsers.handler",
        "events": [
          {
            "http": {
              "path": "scan/users",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-scanUsers",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ScanUsersLambdaVersionL5Ehn1Irx6Da2XZ26CaYJmvCTGOwkhyNvIcM77I5cg"
      },
      "deleteItem": {
        "handler": "src/handlers/deleteItem.handler",
        "events": [
          {
            "http": {
              "path": "delete",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dynamodb-tickets-prod-deleteItem",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteItemLambdaVersionpJzu50JYscw20IbUcvD2cxgsVFc3Cum0oNokA4Cbyc"
      }
    },
    "resources": {
      "Resources": {
        "TicketsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "SK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "GSI1PK",
                "AttributeType": "S"
              },
              {
                "AttributeName": "GSI1SK",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "PK",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "SK",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "GSI1",
                "KeySchema": [
                  {
                    "AttributeName": "GSI1PK",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "GSI1SK",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "dynamodb-tickets",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/dynamodb-tickets/prod/1715892415915-2024-05-16T20:46:55.915Z",
    "artifact": "dynamodb-tickets.zip"
  }
}