service: dynamodb-tickets

plugins:
  - serverless-esbuild
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchGetItem"
        - "dynamodb:ConditionCheckItem"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Query"
        - "dynamodb:UpdateItem"
      Resource:
        - Fn::GetAtt:
          - TicketsTable 
          - Arn
        - Fn::Join: 
          - "/"
          - - Fn::GetAtt:
              - TicketsTable 
              - Arn
            - "index/GSI1"
  environment:
    TABLE_NAME: { Ref: TicketsTable }



functions:
  createCollectionCongfig:
    handler: src/handlers/createCollectionConfig.handler
    events:
    - http:
          path: /collectionconfig
          method: post
  getCollectionConfig:
    handler: src/handlers/getCollectionConfig.handler
    events:
    - http:
          path: /contractaddress/{contractAddress}/ID/{collectionID}
          method: get
  createContractConfig:
    handler: src/handlers/createContractConfig.handler
    events:
    - http:
          path: /contractconfig
          method: post
  getContractConfig:
    handler: src/handlers/getContractConfig.handler
    events:
    - http:
          path: /contractaddress/{contractAddress}
          method: get
  createEntry:
    handler: src/handlers/createEntry.handler
    events:
    - http:
          path: /entry
          method: post
  getEntry:
    handler: src/handlers/getEntry.handler
    events:
    - http:
          path: /event/{eventID}/entry
          method: get          
  createEvent:
    handler: src/handlers/createEvent.handler
    events:
    - http:
          path: /event
          method: post  
  getEvent:
    handler: src/handlers/getEvent.handler
    events:
    - http:
          path: /event/{eventID}
          method: get
  createPromo:
    handler: src/handlers/createPromo.handler
    events:
    - http:
          path: /promo
          method: post
  getPromo:
    handler: src/handlers/getPromo.handler
    events:
    - http:
          path: /event/{eventID}/promo/{code}
          method: get
  createPromoEntry:
    handler: src/handlers/createPromoEntry.handler
    events:
    - http:
          path: /promoentry
          method: post
  getPromoEntry:
    handler: src/handlers/getPromoEntry.handler
    events:
    - http:
          path: /event/{eventID}/wallet/{walletID}/promo
          method: get
  createSocial:
    handler: src/handlers/createSocial.handler
    events:
    - http:
          path: /social
          method: post
  getSocial:
    handler: src/handlers/getSocial.handler
    events:
    - http:
          path: /social/{socialID}
          method: get
  createSocialEntry:
    handler: src/handlers/createSocialEntry.handler
    events:
    - http:
          path: /socialentry
          method: post
  getSocialEntry:
    handler: src/handlers/getSocialEntry.handler
    events:
    - http:
          path: /event/{eventID}/wallet/{walletID}/social
          method: get
  createUser:
    handler: src/handlers/createUser.handler
    events:
    - http:
          path: /user
          method: post
  getUser:
    handler: src/handlers/getUser.handler
    events:
    - http:
          path: /wallet/{walletID}
          method: get
  queryActiveSocial:
    handler: src/handlers/queryActiveSocial.handler
    events:
    - http:
          path: /year/{year}/social
          method: get
  queryCollectionConfig:
    handler: src/handlers/queryCollectionConfig.handler
    events:
    - http:
          path: /contract/{contractAddress}/collection
          method: get
  queryContractConfig:
    handler: src/handlers/queryCollectionConfig.handler
    events:
    - http:
          path: /contract/{contractAddress}/contract
          method: get
  queryEntriesByEvent:
    handler: src/handlers/queryEntriesByEvent.handler
    events:
    - http:
          path: /event/{eventID}/entries
          method: get
  queryRecentEvents:
    handler: src/handlers/queryRecentEvents.handler
    events:
    - http:
          path: /time/{yearMonth}/events
          method: get
  updateAny:
    handler: src/handlers/updateAny.handler
    events:
    - http:
          path: /update
          method: post
          

resources:
  Resources:
    TicketsTable:
      Type: "AWS::DynamoDB::Table"
      Properties: 
        AttributeDefinitions: 
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
          - AttributeName: "GSI1PK"
            AttributeType: "S"
          - AttributeName: "GSI1SK"
            AttributeType: "S"
        KeySchema: 
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        BillingMode: "PAY_PER_REQUEST"
        GlobalSecondaryIndexes:
          - IndexName: 'GSI1'
            KeySchema:
            - AttributeName: "GSI1PK"
              KeyType: "HASH"
            - AttributeName: "GSI1SK"
              KeyType: "RANGE"
            Projection:
              ProjectionType: ALL